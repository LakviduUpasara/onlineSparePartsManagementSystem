package com.spareparts.controller;

import com.spareparts.dao.ItemDAO;
import com.spareparts.dao.OrderDAO;
import com.spareparts.model.Item;
import com.spareparts.model.Order;
import com.spareparts.model.OrderDetail;

import javax.servlet.http.HttpServletRequest;
import java.sql.SQLException;
import java.util.List;

public class OrderController {
    private final OrderDAO orderDAO;
    private final ItemDAO itemDAO;

    public OrderController(OrderDAO orderDAO, ItemDAO itemDAO) {
        this.orderDAO = orderDAO;
        this.itemDAO = itemDAO;
    }

    public boolean createOrder(int customerId, List<OrderDetail> orderDetails, double discount, HttpServletRequest request) throws SQLException, IllegalArgumentException {
        for (OrderDetail detail : orderDetails) {
            Item item = itemDAO.getItemById(detail.getItemID());
            if (item == null) {
                throw new IllegalArgumentException("Item with ID " + detail.getItemID() + " does not exist");
            }
            if (item.getQty() < detail.getQuantity()) {
                throw new IllegalArgumentException("Item " + item.getItemName() + " is out of stock");
            }
            detail.setUnitPrice(item.getSellPrice());
        }

        double totalAmount = 0;
        for (OrderDetail detail : orderDetails) {
            totalAmount += detail.getQuantity() * detail.getUnitPrice();
        }
        totalAmount *= (1 - discount / 100);

        Order order = new Order();
        order.setCustomerID(customerId);
        order.setTotalAmount(totalAmount);
        order.setDiscount(discount);
        int orderId = orderDAO.createOrder(order);

        for (OrderDetail detail : orderDetails) {
            detail.setOrderID(orderId);
            orderDAO.addOrderDetail(detail);
            Item item = itemDAO.getItemById(detail.getItemID());
            item.setQty(item.getQty() - detail.getQuantity());
            itemDAO.updateItem(item);
        }
        return true;
    }

    public List<Order> getAllOrders() throws SQLException {
        return orderDAO.getAllOrders();
    }

    public Order getOrderById(int orderId) throws SQLException {
        return orderDAO.getOrderById(orderId);
    }

    public List<OrderDetail> getOrderDetails(int orderId) throws SQLException {
        return orderDAO.getOrderDetails(orderId);
    }

    public boolean updateOrder(int orderId, int customerId, List<OrderDetail> orderDetails, double discount, HttpServletRequest request) throws SQLException, IllegalArgumentException {
        for (OrderDetail detail : orderDetails) {
            Item item = itemDAO.getItemById(detail.getItemID());
            if (item == null) {
                throw new IllegalArgumentException("Item with ID " + detail.getItemID() + " does not exist");
            }
            int originalQty = getOriginalQuantity(orderId, detail.getItemID());
            int stockAdjustment = detail.getQuantity() - originalQty;
            if (stockAdjustment > item.getQty()) {
                throw new IllegalArgumentException("Item " + item.getItemName() + " has insufficient stock");
            }
            detail.setUnitPrice(item.getSellPrice());
        }

        double totalAmount = 0;
        for (OrderDetail detail : orderDetails) {
            totalAmount += detail.getQuantity() * detail.getUnitPrice();
        }
        totalAmount *= (1 - discount / 100);

        Order order = new Order();
        order.setOrderID(orderId);
        order.setCustomerID(customerId);
        order.setTotalAmount(totalAmount);
        order.setDiscount(discount);

        List<OrderDetail> originalDetails = orderDAO.getOrderDetails(orderId);
        for (OrderDetail original : originalDetails) {
            Item item = itemDAO.getItemById(original.getItemID());
            item.setQty(item.getQty() + original.getQuantity());
            itemDAO.updateItem(item);
        }

        orderDAO.updateOrder(order, orderDetails);

        for (OrderDetail detail : orderDetails) {
            Item item = itemDAO.getItemById(detail.getItemID());
            item.setQty(item.getQty() - detail.getQuantity());
            itemDAO.updateItem(item);
        }
        return true;
    }

    public boolean deleteOrder(int orderId, HttpServletRequest request) throws SQLException {
        List<OrderDetail> details = orderDAO.getOrderDetails(orderId);
        for (OrderDetail detail : details) {
            Item item = itemDAO.getItemById(detail.getItemID());
            item.setQty(item.getQty() + detail.getQuantity());
            itemDAO.updateItem(item);
        }
        orderDAO.deleteOrder(orderId);
        return true;
    }

    private int getOriginalQuantity(int orderId, int itemId) throws SQLException {
        List<OrderDetail> details = orderDAO.getOrderDetails(orderId);
        for (OrderDetail detail : details) {
            if (detail.getItemID() == itemId) {
                return detail.getQuantity();
            }
        }
        return 0;
    }
}