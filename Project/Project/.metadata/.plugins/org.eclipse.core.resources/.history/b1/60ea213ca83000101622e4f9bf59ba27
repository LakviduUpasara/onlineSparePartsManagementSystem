package com.spareparts.servlet;

import com.spareparts.controller.ItemController;
import com.spareparts.model.Item;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.sql.SQLException;

@WebServlet("/item-update")
@MultipartConfig(fileSizeThreshold = 1024 * 1024 * 2, maxFileSize = 1024 * 1024 * 10, maxRequestSize = 1024 * 1024 * 50)
public class ItemUpdateServlet extends BaseServlet {
    private static final long serialVersionUID = 1L;
    private ItemController itemController;

    @Override
    public void init() {
        super.init();
        itemController = new ItemController(itemDAO);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        try {
            int itemID = Integer.parseInt(request.getParameter("id"));
            Item item = itemController.getItemById(itemID);
            if (item != null) {
                request.setAttribute("item", item);
                request.getRequestDispatcher("Stock_manager/itemUpdate.jsp").forward(request, response);
            } else {
                // Set error message for display on error page
                request.setAttribute("error", "Item not found");
                request.getRequestDispatcher("/error.jsp").forward(request, response);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Database error occurred while retrieving item");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        } catch (NumberFormatException e) {
            request.setAttribute("error", "Invalid item ID");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) 
            throws ServletException, IOException {
        try {
            int itemID = Integer.parseInt(request.getParameter("itemID"));
            String itemName = request.getParameter("itemName");
            String itemBrand = request.getParameter("itemBrand");
            int qty = Integer.parseInt(request.getParameter("qty"));
            double buyPrice = Double.parseDouble(request.getParameter("buyPrice"));
            double sellPrice = Double.parseDouble(request.getParameter("sellPrice"));
            Part filePart = request.getPart("image");
            String existingImagePath = request.getParameter("existingImagePath");
            String applicationPath = request.getServletContext().getRealPath("");

            // Update item via controller
            itemController.updateItem(itemID, itemName, itemBrand, qty, buyPrice, sellPrice, filePart, existingImagePath, applicationPath);

            // Set success message in session for display on dashboard
            HttpSession session = request.getSession();
            session.setAttribute("successMessage", "Item updated successfully");

            // Redirect to item dashboard
            response.sendRedirect(request.getContextPath() + "/item-list");
        } catch (SQLException e) {
            e.printStackTrace();
            request.setAttribute("error", "Database error occurred while updating item");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        } catch (IllegalArgumentException e) {
            // Forward validation errors to itemUpdate.jsp
            request.setAttribute("error", e.getMessage());
            request.setAttribute("item", new Item(
                Integer.parseInt(request.getParameter("itemID")),
                request.getParameter("itemName"),
                request.getParameter("itemBrand"),
                Integer.parseInt(request.getParameter("qty")),
                Double.parseDouble(request.getParameter("buyPrice")),
                Double.parseDouble(request.getParameter("sellPrice")),
                request.getParameter("existingImagePath")
            ));
            request.getRequestDispatcher("Stock_manager/itemUpdate.jsp").forward(request, response);
        } catch (NumberFormatException | NullPointerException e) {
            request.setAttribute("error", "Invalid input data");
            request.getRequestDispatcher("Stock_manager/itemUpdate.jsp").forward(request, response);
        }
    }
}